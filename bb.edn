{:tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])
  :init (do (def windows? (str/starts-with? (System/getProperty "os.name")
                                            "Windows"))
            (def jar-name "shan.jar"))

  clean (shell "rm -rf .cpcache target shan shan.build_artifacts.txt shan.jar")
  main {:doc "Run main"
        :task (apply clojure "-M -m shan.core" *command-line-args*)}

  uber {:doc "Builds uberjar"
        :task (when (seq (fs/modified-since jar-name
                                            ["deps.edn" "build.clj" "src"]))
                (clojure "-T:build uber"))}

  run-uber {:doc "Run uberjar"
            :depends [uber]
            :task (apply shell "java -jar" jar-name *command-line-args*)}

  graalvm {:doc "Checks GRAALVM_HOME env var"
           :task
           (let [env (System/getenv "GRAALVM_HOME")]
             (assert env "Set GRAALVM_HOME")
             env)}

  native {:doc "Builds native image"
          :depends [graalvm uber]
          :task (shell (str (fs/file graalvm
                                     "bin"
                                     (if windows?
                                       "native-image.cmd"
                                       "native-image")))
                       "-jar" jar-name
                       "--no-fallback"
                       "-H:ReflectionConfigurationFiles=reflect-config.json"
                       "-H:Name=shan")}}}
