{:tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])
  :init (do (def windows? (str/starts-with? (System/getProperty "os.name")
                                            "Windows"))
            (def jar-name "shan.jar"))

  clean (shell "rm -rf target")
  run-main {:doc "Run main"
            :task (apply clojure "-M -m shan.core" *command-line-args*)}

  uberjar {:doc "Builds uberjar"
           :task (when (seq (fs/modified-since jar-name
                                               ["project.clj" "src"]))
                   (clojure "-M:build uber"))}

  run-uber {:doc "Run uberjar"
            :depends [uberjar]
            :task (apply shell "java -jar" jar-name *command-line-args*)}

  graalvm {:doc "Checks GRAALVM_HOME env var"
           :task
           (let [env (System/getenv "GRAALVM_HOME")]
             (assert env "Set GRAALVM_HOME")
             env)}

  native-image {:doc "Builds native image"
                :depends [graalvm uberjar]
                :task (do
                        (shell (str (fs/file graalvm
                                             "bin"
                                             (if windows? "gu.cmd" "gu")))
                               "install" "native-image")
                        (shell (str (fs/file graalvm
                                             "bin"
                                             (if windows?
                                               "native-image.cmd"
                                               "native-image")))
                               "-jar" jar-name
                               "--no-fallback"
                               "-H:Name=shan"))}}}
