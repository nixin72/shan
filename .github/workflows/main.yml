# This is a basic workflow to help you get started with Actions

name: Publish Jar file

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-jar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: 11

      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@4.0
        with:
          cli: 1.10.3.1029
          github-token: ${{secrets.GITHUB_TOKEN}}

      - name: Build jar
        run: clojure -J-Dclojure.main.report=stderr -T:build uber
        shell: bash

      - name: Get version Number
        run: |
          echo "VERSION=$(cat deps.edn | grep :version | awk '{print substr($2, 2, length($2)-2)}')" >> $GITHUB_ENV

      - name: Publish Jar
        uses: actions/upload-artifact@v2
        with:
          name: "shan-${{env.VERSION}}-snapshot.jar"
          path: target/shan-standalone.jar

      - name: Create Release
        if: contains(github.ref, 'v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: Release ${{github.ref}}
          body: |
            Initial Release
          draft: false
          prerelease: true

      - name: Upload Release Asset
        if: contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: target/shan-standalone.jar
          asset_name: shan-${{env.VERSION}}-snapshot.jar
          asset_content_type: application/jar-archive

      - name: Write Upload URL To Flie
        if: contains(github.ref, 'v')
        run: |
          echo "${{steps.create_release.outputs.upload_url}}" > upload_url.txt

      - name: Publish Upload URL
        if: contains(github.ref, 'v')
        uses: actions/upload-artifact@v2-preview
        with:
          name: "upload_url.txt"
          path: "upload_url.txt"
          
################################################################################
################################################################################
################################################################################

  build-linux:
    needs: [build-jar]
    name: Build Linux Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: 11
          
      - name: Setup GraalVM
        uses: DeLaGuardo/setup-graalvm@5.0
        with: 
          graalvm-version: 21.3.0.java11
          
      - name: Install native-image plugin
        run: gu install native-image
        
      - name: Get version number
        run: | 
          echo "VERSION=$(cat deps.edn | grep :version | awk '{print substr($2, 2, length($2)-2)}')" >> $GITHUB_ENV
      
      - name: Get JAR file
        uses: actions/download-artifact@v2
        with:
          name: shan-${{env.VERSION}}-snapshot.jar
      
      - name: Download release URL
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2
        with:
          name: 'upload-url.txt'
          
      - name: Set upload URL env var
        if: contains(github.ref, 'v')
        run: echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV
                
      - name: Build native image
        run: |
          native-image -jar shan-standalone.jar \
                       --no-server \
                       --no-fallback \
                       --trace-object-instantiation=java.lang.Thread \
                       -H:Name=shan-${{env.VERSION}}-snapshot-linux \
                       -H:ReflectionConfigurationFiles=reflect-config.json \
                       -H:+ReportExceptionStackTraces                           
       
      - name: Publish Linux Image
        if: success()
        uses: actions/upload-artifact@v2
        with: 
          name: shan-${{env.VERSION}}-snapshot-linux
          path: shan-${{env.VERSION}}-snapshot-linux
          
      - name: Upload Linux Image Asset
        if: success() && contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with: 
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: shan-${{env.VERSION}}-snapshot-linux
          asset_path: shan-${{env.VERSION}}-snapshot
          asset_content_type: application/octet-stream
        
